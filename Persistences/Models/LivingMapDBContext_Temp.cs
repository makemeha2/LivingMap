// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Persistences.Models;

public partial class LivingMapDBContext_Temp : DbContext
{
    public LivingMapDBContext_Temp(DbContextOptions<LivingMapDBContext_Temp> options)
        : base(options)
    {
    }

    public virtual DbSet<AddrExtrInfo> AddrExtrInfos { get; set; }

    public virtual DbSet<AdmCode> AdmCodes { get; set; }

    public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }

    public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }

    public virtual DbSet<CommonCode> CommonCodes { get; set; }

    public virtual DbSet<Complaint> Complaints { get; set; }

    public virtual DbSet<ExtractAddress> ExtractAddresses { get; set; }

    public virtual DbSet<Location> Locations { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AddrExtrInfo>(entity =>
        {
            entity.HasKey(e => new { e.Div, e.Area1Code, e.Area2Code });

            entity.ToTable("AddrExtrInfo");

            entity.Property(e => e.Div)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Area1Code)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Area2Code)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.ExtractType)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.FileName).HasMaxLength(100);
            entity.Property(e => e.FilePath).HasMaxLength(300);
            entity.Property(e => e.Ifdate).HasColumnName("IFDate");
            entity.Property(e => e.IfsuccessYn).HasColumnName("IFSuccessYN");
            entity.Property(e => e.ReflectionClsName)
                .HasMaxLength(200)
                .IsUnicode(false);

            entity.HasOne(d => d.AdmCode).WithMany(p => p.AddrExtrInfos)
                .HasForeignKey(d => new { d.Area1Code, d.Area2Code })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AddrExtrInfo_AdmCode");
        });

        modelBuilder.Entity<AdmCode>(entity =>
        {
            entity.HasKey(e => new { e.Area1Code, e.Area2Code });

            entity.ToTable("AdmCode");

            entity.Property(e => e.Area1Code)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Area2Code)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Area1Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Area2Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<AspNetRole>(entity =>
        {
            entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedName] IS NOT NULL)");

            entity.Property(e => e.Name).HasMaxLength(256);
            entity.Property(e => e.NormalizedName).HasMaxLength(256);
        });

        modelBuilder.Entity<AspNetRoleClaim>(entity =>
        {
            entity.HasIndex(e => e.RoleId, "IX_AspNetRoleClaims_RoleId");

            entity.Property(e => e.RoleId).IsRequired();

            entity.HasOne(d => d.Role).WithMany(p => p.AspNetRoleClaims).HasForeignKey(d => d.RoleId);
        });

        modelBuilder.Entity<AspNetUser>(entity =>
        {
            entity.HasIndex(e => e.NormalizedEmail, "EmailIndex");

            entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedUserName] IS NOT NULL)");

            entity.Property(e => e.Email).HasMaxLength(256);
            entity.Property(e => e.NormalizedEmail).HasMaxLength(256);
            entity.Property(e => e.NormalizedUserName).HasMaxLength(256);
            entity.Property(e => e.UserName).HasMaxLength(256);

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "AspNetUserRole",
                    r => r.HasOne<AspNetRole>().WithMany().HasForeignKey("RoleId"),
                    l => l.HasOne<AspNetUser>().WithMany().HasForeignKey("UserId"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId");
                        j.ToTable("AspNetUserRoles");
                        j.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");
                    });
        });

        modelBuilder.Entity<AspNetUserClaim>(entity =>
        {
            entity.HasIndex(e => e.UserId, "IX_AspNetUserClaims_UserId");

            entity.Property(e => e.UserId).IsRequired();

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserClaims).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspNetUserLogin>(entity =>
        {
            entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

            entity.HasIndex(e => e.UserId, "IX_AspNetUserLogins_UserId");

            entity.Property(e => e.LoginProvider).HasMaxLength(128);
            entity.Property(e => e.ProviderKey).HasMaxLength(128);
            entity.Property(e => e.UserId).IsRequired();

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserLogins).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspNetUserToken>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

            entity.Property(e => e.LoginProvider).HasMaxLength(128);
            entity.Property(e => e.Name).HasMaxLength(128);

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserTokens).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<CommonCode>(entity =>
        {
            entity.HasKey(e => new { e.CodeGroup, e.Code });

            entity.ToTable("CommonCode");
        });

        modelBuilder.Entity<Complaint>(entity =>
        {
            entity.HasKey(e => new { e.Idx, e.Div, e.AddressText });

            entity.ToTable("Complaint");

            entity.Property(e => e.Idx).ValueGeneratedOnAdd();
            entity.Property(e => e.Div)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AddressText).HasMaxLength(300);
            entity.Property(e => e.ComplaintType)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Description).HasMaxLength(500);
            entity.Property(e => e.UserInfo)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.UserType)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.Location).WithMany(p => p.Complaints)
                .HasForeignKey(d => new { d.Div, d.AddressText })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Complaint_Location");
        });

        modelBuilder.Entity<ExtractAddress>(entity =>
        {
            entity.HasKey(e => new { e.Div, e.AddressText });

            entity.ToTable("ExtractAddress");

            entity.Property(e => e.Div)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AddressText).HasMaxLength(300);
            entity.Property(e => e.Area1Code)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.Area2Code)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.CreateDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.AddrExtrInfo).WithMany(p => p.ExtractAddresses)
                .HasForeignKey(d => new { d.Div, d.Area1Code, d.Area2Code })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ExtractAddress_AddrExtrInfo");
        });

        modelBuilder.Entity<Location>(entity =>
        {
            entity.HasKey(e => new { e.Div, e.AddressText });

            entity.ToTable("Location");

            entity.Property(e => e.Div)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.AddressText).HasMaxLength(300);
            entity.Property(e => e.CreateDate).HasColumnType("datetime");
            entity.Property(e => e.Detail).HasMaxLength(120);
            entity.Property(e => e.Level0).HasMaxLength(100);
            entity.Property(e => e.Level1).HasMaxLength(100);
            entity.Property(e => e.Level2).HasMaxLength(100);
            entity.Property(e => e.Level3).HasMaxLength(100);
            entity.Property(e => e.Level4A).HasMaxLength(100);
            entity.Property(e => e.Level4L).HasMaxLength(100);
            entity.Property(e => e.Level4Lc)
                .HasMaxLength(100)
                .HasColumnName("Level4LC");
            entity.Property(e => e.Level5).HasMaxLength(100);
            entity.Property(e => e.ManualYn).HasColumnName("ManualYN");
            entity.Property(e => e.MetaAddress).HasMaxLength(500);
            entity.Property(e => e.Remark).HasMaxLength(300);
            entity.Property(e => e.SuccessYn).HasColumnName("SuccessYN");
            entity.Property(e => e.UseYn).HasColumnName("UseYN");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}